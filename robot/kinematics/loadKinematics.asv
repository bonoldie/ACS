function [out] = loadKinematics(DH_table, EETransform, jointSymbols, jointTypes)
%LOADKINEMATICS Loads the structure of a robot from a DH table and a simple
%description to calculate its kinematics.
%   --

syms DH_a DH_alpha DH_d DH_theta;

% homogeneous transform following the DH convention
homogeneous_transform = [
    cos(DH_theta) -sin(DH_theta)*cos(DH_alpha)  sin(DH_theta)*sin(DH_alpha) DH_a*cos(DH_theta);
    sin(DH_theta)  cos(DH_theta)*cos(DH_alpha) -cos(DH_theta)*sin(DH_alpha) DH_a*sin(DH_theta);
    0              sin(DH_alpha)                cos(DH_alpha)               DH_d;
    0              0                            0                           1
];

DOF = size(jointSymbols, 2);

% transformation matrices from the DH definition
T_dh = cell(1, size(DH_table, 2));

for i=1:size(DH_table,1)
    T_dh{i} = subs(homogeneous_transform, [DH_a DH_alpha DH_d DH_theta], DH_table(i, :));
end

T = [T_dh, EETransform];

T_cumulative = cumulateTransforms(T);


% geometric Jacobian

Jg = sym(zeros(6, DOF));

d_b_ee = T_cumulative{end}(1:3,4);

for i = 1:DOF
    
    T_cumulative(i)

    if strcmp(jointTypes{i}, 'Revolute')
        Jg(:, i) = [
            cross(T_cumulative{i}(1:3, 3), d_b_ee - T_cumulative{i}(1:3))
        ];
    elseif strcmp(jointTypes{i}, 'Prismatic')
    
    end
      
end


% Jg = cell(1, size(transforms, 2));
% 
% % analytical Jacobians from the base frame to the i-th frame
% Ja = cell(1, size(transforms, 2));
% 
% for i=1:size(transforms,2)
%     T_b_i = cumulativeTransforms{i};
% 
%     % jacobians calculation 
%     Jg{i} = zeros(6, size(jointSymbols,2));
% 
%     for j=1:min(i,3)
%         if strcmp(jointTypes{j},'Rev')
%             Jg{i}(1:3, j) = cumulativeTransforms{i}(1:3,3);
%         end
%     end
% 
%     % Analytical jacobian
%     phi_ZYZ = gradient(atan2(T_b_i(2,3), T_b_i(1,3)), jointSymbols);
%     theta_ZYZ = gradient(atan2(sqrt(T_b_i(1,3)^2 + T_b_i(2,3)^2), T_b_i(3,3)), jointSymbols);
%     psi_ZYZ =  gradient(atan2(T_b_i(3,2), -T_b_i(3,1)), jointSymbols);
% 
%     Ja{i} = [
%         phi_ZYZ theta_ZYZ psi_ZYZ;
%         gradient(T_b_i(1,4), jointSymbols)';
%         gradient(T_b_i(2,4), jointSymbols)'; 
%         gradient(T_b_i(3,4), jointSymbols)'; 
%     ];
% end

out = struct( ...
    'DOF',          DOF, ...
    'T',            T, ...
    'T_cumulative', T_cumulative, ...
    'Ja',           Ja, ...
    'Jg',           Jg ...
);

end

